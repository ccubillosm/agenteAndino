#!/usr/bin/env python3
"""
Orquestador Principal del Proyecto Agente C√≥ndor Andino
Ejecuta todo el flujo de trabajo de an√°lisis burs√°til de forma secuencial
"""

import os
import sys
import time
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# Agregar la ra√≠z del proyecto al path
ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if ROOT not in sys.path:
    sys.path.append(ROOT)

import config

def ejecutar_etapa_1_descarga():
    """Etapa 1: Descarga de datos de acciones chilenas"""
    print("\n" + "="*60)
    print("ETAPA 1: DESCARGA DE DATOS DE ACCIONES CHILENAS")
    print("="*60)
    
    try:
        from Backend_python.descargar_acciones import main as descargar_acciones
        descargar_acciones()
        
        if os.path.exists(config.ARCHIVO_ACCIONES_MASTER):
            df = pd.read_csv(config.ARCHIVO_ACCIONES_MASTER, sep=';', decimal=',')
            print(f"‚úì Datos descargados exitosamente: {len(df)} registros")
            return True
        else:
            print("‚úó Error: No se gener√≥ el archivo de acciones master")
            return False
    except Exception as e:
        print(f"‚úó Error en descarga de acciones: {e}")
        return False

def ejecutar_etapa_2_enriquecimiento():
    """Etapa 2: Enriquecimiento t√©cnico con indicadores"""
    print("\n" + "="*60)
    print("ETAPA 2: ENRIQUECIMIENTO T√âCNICO")
    print("="*60)
    
    try:
        from Backend_python.motor_condor import main as motor_condor
        motor_condor()
        
        if os.path.exists(config.ARCHIVO_TECNICO):
            df = pd.read_csv(config.ARCHIVO_TECNICO, sep=';', decimal=',')
            print(f"‚úì Indicadores t√©cnicos calculados: {len(df)} registros")
            return True
        else:
            print("‚úó Error: No se gener√≥ el archivo t√©cnico")
            return False
    except Exception as e:
        print(f"‚úó Error en enriquecimiento t√©cnico: {e}")
        return False

def ejecutar_etapa_3_fundamental():
    """Etapa 3: Verificaci√≥n de datos fundamentales existentes"""
    print("\n" + "="*60)
    print("ETAPA 3: VERIFICACI√ìN DE DATOS FUNDAMENTALES")
    print("="*60)
    
    try:
        # Verificar que existe el archivo fundamental.csv
        if os.path.exists(config.CSV_FUNDAMENTAL):
            df = pd.read_csv(config.CSV_FUNDAMENTAL, sep=';', decimal=',')
            print(f"‚úì Datos fundamentales verificados: {len(df)} registros")
            print(f"   Archivo: {config.CSV_FUNDAMENTAL}")
            return True
        else:
            print("‚úó Error: No se encontr√≥ el archivo fundamental.csv")
            return False
    except Exception as e:
        print(f"‚úó Error en verificaci√≥n de datos fundamentales: {e}")
        return False

def ejecutar_etapa_4_perfilamiento():
    """Etapa 4: Perfilamiento y clustering"""
    print("\n" + "="*60)
    print("ETAPA 4: PERFILAMIENTO Y CLUSTERING")
    print("="*60)
    
    try:
        from Backend_python.generar_perfiles_de_acciones import main as generar_perfiles
        generar_perfiles()
        
        if os.path.exists(config.ARCHIVO_PERFILES):
            df = pd.read_csv(config.ARCHIVO_PERFILES, sep=';', decimal=',')
            print(f"‚úì Perfiles generados: {len(df)} acciones")
            return True
        else:
            print("‚úó Error: No se generaron los perfiles")
            return False
    except Exception as e:
        print(f"‚úó Error en perfilamiento: {e}")
        return False

def ejecutar_etapa_5_fusion():
    """Etapa 5: Fusi√≥n estrat√©gica y detecci√≥n de oportunidades"""
    print("\n" + "="*60)
    print("ETAPA 5: FUSI√ìN ESTRAT√âGICA")
    print("="*60)
    
    try:
        from Backend_python.analisis_fusion import main as analisis_fusion
        analisis_fusion()
        
        if os.path.exists(config.ARCHIVO_OPORTUNIDADES):
            df = pd.read_csv(config.ARCHIVO_OPORTUNIDADES, sep=';', decimal=',')
            print(f"‚úì Oportunidades detectadas: {len(df)} registros")
            return True
        else:
            print("‚úó Error: No se gener√≥ el archivo de oportunidades")
            return False
    except Exception as e:
        print(f"‚úó Error en fusi√≥n estrat√©gica: {e}")
        return False

def generar_resumen_ejecutivo():
    """Genera un resumen ejecutivo de todos los resultados"""
    print("\n" + "="*60)
    print("RESUMEN EJECUTIVO")
    print("="*60)
    
    archivos_generados = []
    
    # Verificar archivos generados
    archivos_a_verificar = [
        (config.ARCHIVO_ACCIONES_MASTER, "Datos de acciones"),
        (config.ARCHIVO_TECNICO, "Indicadores t√©cnicos"),
        (config.ARCHIVO_FUNDAMENTAL_DB, "Datos fundamentales"),
        (config.ARCHIVO_PERFILES, "Perfiles de acciones"),
        (config.ARCHIVO_OPORTUNIDADES, "Oportunidades detectadas")
    ]
    
    for archivo, descripcion in archivos_a_verificar:
        if os.path.exists(archivo):
            try:
                df = pd.read_csv(archivo, sep=';', decimal=',')
                print(f"‚úì {descripcion}: {archivo} ({len(df)} registros)")
                archivos_generados.append(archivo)
            except Exception as e:
                print(f"‚úó {descripcion}: {archivo} (error al leer: {e})")
        else:
            print(f"‚úó {descripcion}: {archivo} (no encontrado)")
    
    return archivos_generados

def crear_visualizacion_general():
    """Crea una visualizaci√≥n general de los resultados"""
    print("\n" + "="*60)
    print("GENERANDO VISUALIZACI√ìN GENERAL")
    print("="*60)
    
    try:
        # Crear figura con subplots
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('Resumen General - Agente C√≥ndor Andino', fontsize=16, fontweight='bold')
        
        # 1. Distribuci√≥n de perfiles de acciones
        if os.path.exists(config.ARCHIVO_PERFILES):
            df_perfiles = pd.read_csv(config.ARCHIVO_PERFILES, sep=';', decimal=',')
            if 'personalidad' in df_perfiles.columns:
                perfiles_count = df_perfiles['personalidad'].value_counts()
                axes[0, 0].pie(perfiles_count.values, labels=perfiles_count.index, autopct='%1.1f%%')
                axes[0, 0].set_title('Distribuci√≥n de Perfiles de Acciones')
        
        # 2. Oportunidades por sector
        if os.path.exists(config.ARCHIVO_OPORTUNIDADES):
            df_oportunidades = pd.read_csv(config.ARCHIVO_OPORTUNIDADES, sep=';', decimal=',')
            if 'ticker' in df_oportunidades.columns:
                # Obtener sector de cada ticker
                df_acciones = pd.read_csv(config.CSV_ACCIONES)
                df_oportunidades = pd.merge(df_oportunidades, df_acciones, left_on='ticker', right_on='NEMOTECNICO', how='left')
                if 'INDUSTRIA' in df_oportunidades.columns:
                    sector_count = df_oportunidades['INDUSTRIA'].value_counts()
                    sector_count.plot(kind='bar', ax=axes[0, 1])
                    axes[0, 1].set_title('Oportunidades por Sector')
                    axes[0, 1].tick_params(axis='x', rotation=45)
        
        # 3. RSI promedio por ticker (√∫ltimos datos)
        if os.path.exists(config.ARCHIVO_TECNICO):
            df_tecnico = pd.read_csv(config.ARCHIVO_TECNICO, sep=';', decimal=',')
            if 'rsi_14' in df_tecnico.columns and 'ticker' in df_tecnico.columns:
                rsi_promedio = df_tecnico.groupby('ticker')['rsi_14'].mean().sort_values(ascending=False)
                rsi_promedio.head(10).plot(kind='bar', ax=axes[1, 0])
                axes[1, 0].set_title('RSI Promedio por Ticker (Top 10)')
                axes[1, 0].tick_params(axis='x', rotation=45)
        
        # 4. Salud financiera de las acciones
        if os.path.exists(config.CSV_FUNDAMENTAL):
            df_fundamental = pd.read_csv(config.CSV_FUNDAMENTAL, sep=';', decimal=',')
            if 'salud_financiera' in df_fundamental.columns:
                salud_count = df_fundamental['salud_financiera'].value_counts()
                salud_count.plot(kind='bar', ax=axes[1, 1], color=['green', 'orange', 'red'])
                axes[1, 1].set_title('Distribuci√≥n de Salud Financiera')
                axes[1, 1].tick_params(axis='x', rotation=45)
        
        plt.tight_layout()
        plt.savefig('output/resumen_general_agente_condor.png', dpi=300, bbox_inches='tight')
        print("‚úì Visualizaci√≥n guardada como 'output/resumen_general_agente_condor.png'")
        
    except Exception as e:
        print(f"‚úó Error al generar visualizaci√≥n: {e}")

def main():
    """Funci√≥n principal que ejecuta todo el flujo de trabajo"""
    print("üöÄ INICIANDO AGENTE C√ìNDOR ANDINO - AN√ÅLISIS BURS√ÅTIL COMPLETO")
    print(f"üìÖ Fecha de ejecuci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    inicio_tiempo = time.time()
    
    # Ejecutar todas las etapas
    etapas = [
        ("Descarga de datos", ejecutar_etapa_1_descarga),
        ("Enriquecimiento t√©cnico", ejecutar_etapa_2_enriquecimiento),
        ("Verificaci√≥n de datos fundamentales", ejecutar_etapa_3_fundamental),
        ("Perfilamiento", ejecutar_etapa_4_perfilamiento),
        ("Fusi√≥n estrat√©gica", ejecutar_etapa_5_fusion)
    ]
    
    etapas_exitosas = 0
    for nombre, funcion in etapas:
        try:
            if funcion():
                etapas_exitosas += 1
            time.sleep(1)  # Pausa entre etapas
        except Exception as e:
            print(f"‚úó Error cr√≠tico en {nombre}: {e}")
    
    # Generar resumen y visualizaci√≥n
    archivos_generados = generar_resumen_ejecutivo()
    crear_visualizacion_general()
    
    tiempo_total = time.time() - inicio_tiempo
    
    print("\n" + "="*60)
    print("RESUMEN FINAL")
    print("="*60)
    print(f"‚úì Etapas completadas exitosamente: {etapas_exitosas}/{len(etapas)}")
    print(f"‚úì Archivos generados: {len(archivos_generados)}")
    print(f"‚è±Ô∏è  Tiempo total de ejecuci√≥n: {tiempo_total:.2f} segundos")
    
    if etapas_exitosas == len(etapas):
        print("\nüéâ ¬°PROCESO COMPLETADO CON √âXITO!")
        print("üìä Todos los an√°lisis han sido generados correctamente.")
        print("üîç Revisa los archivos CSV generados y la visualizaci√≥n PNG.")
    else:
        print(f"\n‚ö†Ô∏è  PROCESO COMPLETADO CON ADVERTENCIAS")
        print(f"   {len(etapas) - etapas_exitosas} etapas fallaron.")

if __name__ == "__main__":
    main()
